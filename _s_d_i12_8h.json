{
  "version": "1.9.1",
  "compound": {
    "kind": "file",
    "id": "_s_d_i12_8h",
    "name": "SDI12.h",
    "url_base": "_s_d_i12_8h",
    "url": "_s_d_i12_8h.html",
    "include": null,
    "has_template_details": false,
    "templates": null,
    "brief": "This file contains the main class for the SDI-12 implementation.",
    "description": "<aside class=\"m-note m-default\"><h4>Copyright</h4><p>(c) 2013-2020 Stroud Water Research Center (SWRC) and the EnviroDIY Development Team</p></aside><aside class=\"m-note m-default\"><h4>Date</h4><p>August 2013</p></aside><aside class=\"m-note m-default\"><h4>Author</h4><p>Kevin M.Smith <a href=\"mailto:SDI12@ethosengineering.org\">SDI12@ethosengineering.org</a></p></aside><p>========================== Arduino SDI-12 ==================================</p><p>An Arduino library for SDI-12 communication with a wide variety of environmental sensors. This library provides a general software solution, without requiring any additional hardware.</p><p>======================== Attribution &amp; License =============================</p><p>Copyright (C) 2013 Stroud Water Research Center Available at <a href=\"https://github.com/EnviroDIY/Arduino-SDI-12\">https:/<wbr />/<wbr />github.com/<wbr />EnviroDIY/<wbr />Arduino-SDI-12</a></p><p>Authored initially in August 2013 by: Kevin M. Smith (<a href=\"http://ethosengineering.org\">http:/<wbr />/<wbr />ethosengineering.org</a>) Inquiries: <a href=\"mailto:SDI12@ethosengineering.org\">SDI12@ethosengineering.org</a></p><p>Modified 2017 by Manuel Jimenez Buendia to work with ARM based processors (Arduino Zero)</p><p>Maintenance and merging 2017 by Sara Damiano</p><p>based on the SoftwareSerial library (formerly NewSoftSerial), authored by: ladyada (<a href=\"http://ladyada.net\">http:/<wbr />/<wbr />ladyada.net</a>) Mikal Hart (<a href=\"http://www.arduiniana.org\">http:/<wbr />/<wbr />www.arduiniana.org</a>) Paul Stoffregen (<a href=\"http://www.pjrc.com\">http:/<wbr />/<wbr />www.pjrc.com</a>) Garrett Mace (<a href=\"http://www.macetech.com\">http:/<wbr />/<wbr />www.macetech.com</a>) Brett Hagman (<a href=\"http://www.roguerobotics.com/\">http:/<wbr />/<wbr />www.roguerobotics.com/<wbr /></a>)</p><p>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</p><p>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</p><p>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA</p>",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "modules": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [
      {
        "kind": "class",
        "url": "class_s_d_i12.html",
        "name": "SDI12",
        "brief": "The main class for SDI 12 instances.",
        "deprecated": null,
        "since": null,
        "templates": null
      }
    ],
    "base_classes": [],
    "derived_classes": [],
    "enums": [
      {
        "base_url": "_s_d_i12_8h.html",
        "id": "ab2c5d00ddee50ff8d5d68cd2d7a7fa49",
        "include": null,
        "has_details": true,
        "type": "",
        "name": "LookaheadMode",
        "brief": "This enumeration provides the lookahead options for parseInt(), parseFloat().",
        "description": "<p>The rules set out here are used until either the first valid character is found or a time out occurs due to lack of input.</p><p>This enum is part of the Stream parent class, but is missing from the ESP8266 and ESP32 cores.</p>",
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "is_strong": false,
        "values": [
          {
            "id": "ab2c5d00ddee50ff8d5d68cd2d7a7fa49a823ae842da6939bbada21ab3b5c4f2eb",
            "name": "SKIP_ALL",
            "initializer": "",
            "brief": "",
            "description": "<p>All invalid characters are ignored.</p>",
            "deprecated": null,
            "since": null
          },
          {
            "id": "ab2c5d00ddee50ff8d5d68cd2d7a7fa49a141996d9ff8288dd50fb39c1aa3e4a95",
            "name": "SKIP_NONE",
            "initializer": "",
            "brief": "",
            "description": "<p>Nothing is skipped, and the stream is not touched unless the first waiting character is valid.</p>",
            "deprecated": null,
            "since": null
          },
          {
            "id": "ab2c5d00ddee50ff8d5d68cd2d7a7fa49a4c6e81602f86235fb8e040f22b743b07",
            "name": "SKIP_WHITESPACE",
            "initializer": "",
            "brief": "",
            "description": "<p>Only tabs, spaces, line feeds &amp; carriage returns are skipped.</p>",
            "deprecated": null,
            "since": null
          }
        ],
        "has_value_details": true
      }
    ],
    "typedefs": [
      {
        "base_url": "_s_d_i12_8h.html",
        "id": "a11206b202ad711bc9713f324ae619bcf",
        "include": null,
        "has_details": false,
        "is_using": false,
        "type": "const __FlashStringHelper*",
        "args": "",
        "name": "FlashString",
        "brief": "Helper for strings stored in flash.",
        "description": "",
        "deprecated": null,
        "since": null,
        "is_protected": false,
        "has_template_details": false,
        "templates": null
      }
    ],
    "funcs": [],
    "vars": [],
    "defines": [
      {
        "base_url": "_s_d_i12_8h.html",
        "id": "ab362c458819bb9ea1b99a764444c4921",
        "include": null,
        "has_details": false,
        "name": "NO_IGNORE_CHAR",
        "initializer": "'\\x01'",
        "brief": "a char not found in a valid ASCII numeric field",
        "description": "",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_s_d_i12_8h.html",
        "id": "adf7ac65ee62c8bab1bf3ba6baf41a908",
        "include": null,
        "has_details": false,
        "name": "SDI12_WAKE_DELAY",
        "initializer": "0",
        "brief": "The amount of additional time in milliseconds that the sensor takes to wake before being ready to receive a command. Default is 0ms - meaning the sensor is ready for a command by the end of the 12ms break. Per protocol, the wake time must be less than 100 ms.",
        "description": "",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_s_d_i12_8h.html",
        "id": "a4afa5b9a69eeeeec02aa78129c663f98",
        "include": null,
        "has_details": true,
        "name": "SDI12_BUFFER_SIZE",
        "initializer": "81",
        "brief": "The buffer size for incoming SDI-12 data.",
        "description": "<p>All responses should be less than 81 characters:</p><ul><li>address is a single (1) character</li><li>values has a maximum value of 75 characters</li><li>CRC is 3 characters</li><li>CR is a single character</li><li>LF is a single character</li></ul>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      },
      {
        "base_url": "_s_d_i12_8h.html",
        "id": "a5261e90ea3b53cca5dd95bdf1749d9d9",
        "include": null,
        "has_details": true,
        "name": "READTIME",
        "initializer": "sdi12timer.SDI12TimerRead()",
        "brief": "The function or macro used to read the clock timer value.",
        "description": "<aside class=\"m-note m-info\"><h4>Note</h4><p>The ESP32 and ESP8266 are fast enough processors that they can take the time to read the core &#x27;micros()&#x27; function still complete the other processing needed on the serial bits. All of the other processors using the Arduino core also have the micros function, but the rest are not fast enough to waste the processor cycles to use the micros function and must use the faster assembly macros to read the processor timer directly.</p></aside>",
        "return_value": null,
        "deprecated": null,
        "since": null,
        "has_param_details": false,
        "params": null
      }
    ],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [],
    "has_enum_details": true,
    "has_typedef_details": false,
    "has_func_details": false,
    "has_var_details": false,
    "has_define_details": true,
    "breadcrumb": [
      [
        "SDI12.h",
        "_s_d_i12_8h.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "SDI12.h",
        "_s_d_i12_8h.html"
      ]
    ]
  }
}