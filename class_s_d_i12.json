{
  "version": "1.12.0",
  "compound": {
    "kind": "class",
    "id": "class_s_d_i12",
    "name": "SDI12",
    "url_base": "class_s_d_i12",
    "url": "class_s_d_i12.html",
    "include": [
      "&lt;src/SDI12.h&gt;",
      "_s_d_i12_8h.html"
    ],
    "has_template_details": false,
    "templates": null,
    "brief": "The main class for SDI 12 instances.",
    "description": "",
    "sections": "",
    "deprecated": null,
    "since": null,
    "example_navigation": null,
    "footer_navigation": null,
    "modules": [],
    "dirs": [],
    "files": [],
    "namespaces": [],
    "classes": [],
    "base_classes": [],
    "derived_classes": [],
    "enums": [],
    "typedefs": [],
    "funcs": [],
    "vars": [],
    "defines": [],
    "public_types": [],
    "public_static_funcs": [],
    "typeless_funcs": [],
    "public_funcs": [],
    "signals": [],
    "public_slots": [],
    "public_static_vars": [],
    "public_vars": [],
    "protected_types": [],
    "protected_static_funcs": [],
    "protected_funcs": [],
    "protected_slots": [],
    "protected_static_vars": [],
    "protected_vars": [],
    "private_funcs": [],
    "private_slots": [],
    "related": [],
    "friend_funcs": [],
    "groups": [
      {
        "name": "Data Line States",
        "id": "data-line-states",
        "description": "<p>Functions for maintaining the proper data line state.</p><p><a name=\"line_states\"></a></p><p>The Arduino is responsible for managing communication with the sensors. Since all the data transfer happens on the same line, the state of the data line is very important.</p><h4 id=\"line_state_spec\">Specifications</h4><p>Per the SDI-12 specification, the voltage ranges for SDI-12 are:</p><ul><li>When the pin is in the SDI12_HOLDING state, it is holding the line LOW so that interference does not unintentionally wake the sensors up. The interrupt is disabled for the dataPin, because we are not expecting any SDI-12 traffic.</li><li>In the SDI12_TRANSMITTING state, we would like exclusive control of the Arduino, so we shut off all interrupts, and vary the voltage of the dataPin in order to wake up and send commands to the sensor.</li><li>In the SDI12_LISTENING state, we are waiting for a sensor to respond, so we drop the voltage level to LOW and relinquish control (INPUT).</li><li>If we would like to disable all SDI-12 functionality, then we set the system to the SDI12_DISABLED state, removing the interrupt associated with the dataPin. For predictability, we set the pin to a LOW level high impedance state (INPUT).</li></ul><h4 id=\"line_state_table\">As a Table</h4><p>Summarized in a table:</p><table class=\"m-table m-fullwidth m-flat\"><thead><tr><th>State</th><th>Interrupts</th><th>Pin Mode</th><th>Pin Level</th></tr></thead><tbody><tr><td>SDI12_DISABLED</td><td>Pin Disable</td><td>INPUT</td><td>&mdash;</td></tr><tr><td>SDI12_ENABLED</td><td>Pin Disable</td><td>INPUT</td><td>&mdash;</td></tr><tr><td>SDI12_HOLDING</td><td>Pin Disable</td><td>OUTPUT</td><td>LOW</td></tr><tr><td>SDI12_TRANSMITTING</td><td>All/Pin Disable</td><td>OUTPUT</td><td>VARYING</td></tr><tr><td>SDI12_LISTENING</td><td>All Enable</td><td>INPUT</td><td>&mdash;</td></tr></tbody></table><h4 id=\"line_state_seq\">Sequencing</h4><p>Generally, this flow of line states is acceptable:</p><p><code>HOLDING --&gt; TRANSMITTING --&gt; LISTENING --&gt; TRANSMITTING --&gt; LISTENING</code></p><p>If you have interference, you should force a hold, using <a href=\"class_s_d_i12.html#a94b3831f6a65e19f6cabaaa2f28c913e\" class=\"m-doc\">forceHold()</a>. The flow would then be:</p><p><code>HOLDING --&gt; TRANSMITTING --&gt; LISTENING --&gt;</code> done reading, <a href=\"class_s_d_i12.html#a94b3831f6a65e19f6cabaaa2f28c913e\" class=\"m-doc\">forceHold()</a> <code>---&gt; HOLDING</code></p><aside class=\"m-note m-default\"><h4>See also</h4><p>For a detailed explanation of interrupts see <a href=\"interrupts_page.html\" class=\"m-doc\">Overview of Interrupts</a></p></aside>",
        "members": [
          [
            "enum",
            {
              "base_url": "class_s_d_i12.html",
              "id": "ac01684807c6e726786a4468ef5d00175",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "SDI12_STATES",
              "brief": "The various SDI-12 line states.",
              "description": "",
              "deprecated": null,
              "since": null,
              "is_protected": false,
              "is_strong": false,
              "values": [
                {
                  "id": "ac01684807c6e726786a4468ef5d00175a09a24375d21da05c2c76ae327d306ac0",
                  "name": "SDI12_DISABLED",
                  "initializer": "",
                  "brief": "",
                  "description": "<p>SDI-12 is disabled, pin mode INPUT, interrupts disabled for the pin</p>",
                  "deprecated": null,
                  "since": null
                },
                {
                  "id": "ac01684807c6e726786a4468ef5d00175a92377816c65a8d9ae426287d34559bc9",
                  "name": "SDI12_ENABLED",
                  "initializer": "",
                  "brief": "",
                  "description": "<p>SDI-12 is enabled, pin mode INPUT, interrupts disabled for the pin</p>",
                  "deprecated": null,
                  "since": null
                },
                {
                  "id": "ac01684807c6e726786a4468ef5d00175a8ef1844364e093a1556a0c39592f0bf6",
                  "name": "SDI12_HOLDING",
                  "initializer": "",
                  "brief": "",
                  "description": "<p>The line is being held LOW, pin mode OUTPUT, interrupts disabled for the pin</p>",
                  "deprecated": null,
                  "since": null
                },
                {
                  "id": "ac01684807c6e726786a4468ef5d00175a064638b0fd7d4695ac5a6bd182f7e7f3",
                  "name": "SDI12_TRANSMITTING",
                  "initializer": "",
                  "brief": "",
                  "description": "<p>Data is being transmitted by the SDI-12 master, pin mode OUTPUT, interrupts disabled for the pin</p>",
                  "deprecated": null,
                  "since": null
                },
                {
                  "id": "ac01684807c6e726786a4468ef5d00175a71daf42bed128eeccc7adac2a5a540aa",
                  "name": "SDI12_LISTENING",
                  "initializer": "",
                  "brief": "",
                  "description": "<p>The SDI-12 master is listening for a response from the slave, pin mode INPUT, interrupts enabled for the pin</p>",
                  "deprecated": null,
                  "since": null
                }
              ],
              "has_value_details": true
            }
          ],
          [
            "typedef",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a9d1d99b2fc9f04eb860134101dfed936",
              "include": null,
              "has_details": false,
              "is_using": false,
              "type": "enum SDI12::SDI12_STATES",
              "args": "",
              "name": "SDI12_STATES",
              "brief": "The various SDI-12 line states.",
              "description": "",
              "deprecated": null,
              "since": null,
              "is_protected": false,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a94b3831f6a65e19f6cabaaa2f28c913e",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "forceHold",
              "brief": "Set line state to SDI12_HOLDING.",
              "description": "<p>A public function which forces the line into a &quot;holding&quot; state. This is generally unneeded, but for deployments where interference is an issue, it should be used after all expected bytes have been returned from the sensor.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a0c4769b9bc4c638b384541275d4e671f",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "forceListen",
              "brief": "Set line state to SDI12_LISTENING.",
              "description": "<p>A public function which forces the line into a &quot;listening&quot; state. This may be needed for implementing a slave-side device, which should relinquish control of the data line when not transmitting.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ]
        ]
      },
      {
        "name": "Static member variables",
        "id": "static-member-variables",
        "description": "<p>These are constants that apply to all SDI-12 instances.</p><p><a name=\"sdi12_statics\"></a></p>",
        "members": [
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a66c8de65cf00a3b93ac5c4cc7c552064",
              "include": null,
              "has_details": false,
              "type": "<a href=\"class_s_d_i12.html\" class=\"m-doc\">SDI12</a>*",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "_activeObject",
              "brief": "static pointer to active <a href=\"class_s_d_i12.html\" class=\"m-doc\">SDI12</a> instance",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "aeaff7022e63d07efdace2c8d6b324d5c",
              "include": null,
              "has_details": false,
              "type": "<a href=\"class_s_d_i12_timer.html\" class=\"m-doc\">SDI12Timer</a>",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "sdi12timer",
              "brief": "The <a href=\"class_s_d_i12_timer.html\" class=\"m-doc\">SDI12Timer</a> instance to use for checking bit reception times.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a0ed9adc46551c62d02c7f218c4152082",
              "include": null,
              "has_details": true,
              "type": "const uint16_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "bitWidth_micros",
              "brief": "The size of a bit in microseconds.",
              "description": "<p>1200 baud = 1200 bits/second ~ 833.333 \u00b5s/bit</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a23e2d02966bdde45a2672151be7841c8",
              "include": null,
              "has_details": false,
              "type": "const uint16_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "lineBreak_micros",
              "brief": "The required &quot;break&quot; before sending commands, &gt;= 12ms.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "aa72a3e433d3551f13eebbe95b95d58eb",
              "include": null,
              "has_details": false,
              "type": "const uint16_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "marking_micros",
              "brief": "The required mark before a command or response, &gt;= 8.33ms.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a7a1cbc4f67aa25183884a96c1729c03c",
              "include": null,
              "has_details": false,
              "type": "const <a href=\"_s_d_i12__boards_8h.html#ab4bb1ac90b8fb685621951664af46a2a\" class=\"m-doc\">sdi12timer_<wbr />t</a>",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "txBitWidth",
              "brief": "the width of a single bit in &quot;ticks&quot; of the cpu clock.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a55e84985474df4700df24c5bce311eec",
              "include": null,
              "has_details": false,
              "type": "const uint8_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "WAITING_FOR_START_BIT",
              "brief": "A mask for the rxState while waiting for a start bit; 0b11111111.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a1ecd45bafd93912a52faad1e2dec4bdc",
              "include": null,
              "has_details": false,
              "type": "<a href=\"_s_d_i12__boards_8h.html#ab4bb1ac90b8fb685621951664af46a2a\" class=\"m-doc\">sdi12timer_<wbr />t</a>",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "prevBitTCNT",
              "brief": "Stores the time of the previous RX transition in micros.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "afc41ba83e116964cd32424fa01916d96",
              "include": null,
              "has_details": true,
              "type": "uint8_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "rxState",
              "brief": "Tracks how many bits are accounted for on an incoming character.",
              "description": "<ul><li>if 0: indicates that we got a start bit</li><li>if &gt;0: indicates the number of bits received</li></ul><p>0 - got start bit 1 - got data bit 0 2 - got data bit 1 3 - got data bit 2 4 - got data bit 3 5 - got data bit 4 6 - got data bit 5 7 - got data bit 6 8 - got data bit 7 (parity) 9 - got stop bit 255 - waiting for next start bit</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a805a0624c9ec5fdfd6d8f1df1461ec60",
              "include": null,
              "has_details": true,
              "type": "uint8_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "rxMask",
              "brief": "a bit mask for building a received character",
              "description": "<p>The mask has a single bit set, in the place of the active bit based on the rxState.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a432c6f5ea7e6d3662aea777cc215b9c0",
              "include": null,
              "has_details": false,
              "type": "uint8_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "rxValue",
              "brief": "the value of the character being built",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ]
        ]
      },
      {
        "name": "Buffer Setup",
        "id": "buffer-setup",
        "description": "<p>Creating a circular buffer for incoming data.</p><p><a name=\"sdi12_buffer\"></a></p><p>The buffer is used to store characters from the SDI-12 data line. Characters are read into the buffer when an interrupt is received on the data line. The buffer uses a circular implementation with pointers to both the head and the tail. All SDI-12 instances share the same buffer.</p><p>The default buffer size is the maximum length of a response to a normal SDI-12 command, which is 81 characters:</p><ul><li>address is a single (1) character</li><li>values has a maximum value of 75 characters</li><li>CRC is 3 characters</li><li>CR is a single character</li><li>LF is a single character</li></ul><p>For more information on circular buffers: <a href=\"http://en.wikipedia.org/wiki/Circular_buffer\">http://en.wikipedia.org/wiki/Circular_<wbr />buffer</a></p>",
        "members": [
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a420e1f678802064fc3c7dd5a42ef9452",
              "include": null,
              "has_details": true,
              "type": "uint8_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "_rxBuffer",
              "brief": "A single incoming character buffer for ALL SDI-12 objects (Rx buffer)",
              "description": "<p>Increasing the buffer size will use more RAM. If you exceed 256 characters, be sure to change the data type of the index to support the larger range of addresses. To adjust the size of the buffer, change the value of <code>SDI12_BUFFER_SIZE</code> in the header file.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a6efdb270846bb19acee02cdbdfba7afd",
              "include": null,
              "has_details": false,
              "type": "volatile uint8_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "_rxBufferTail",
              "brief": "Index of buffer head. (unsigned 8-bit integer, can map from 0-255)",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a6930573c792df875b43ca5b56c423648",
              "include": null,
              "has_details": false,
              "type": "volatile uint8_t",
              "is_constexpr": false,
              "is_static": true,
              "is_protected": false,
              "is_private": true,
              "name": "_rxBufferHead",
              "brief": "Index of buffer tail. (unsigned 8-bit integer, can map from 0-255)",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a869c2dcc7a3f15805a0f71bea3278d8a",
              "include": null,
              "has_details": false,
              "type": "bool",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": false,
              "is_private": true,
              "name": "_bufferOverflow",
              "brief": "The buffer overflow status.",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ]
        ]
      },
      {
        "name": "Constructor, Destructor, Begins, and Setters",
        "id": "constructor-destructor-begins-and-setters",
        "description": "<p>These functions set up the SDI-12 object and prepare it for use.</p><p><a name=\"ctor\"></a></p>",
        "members": [
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "aecb63f6c23cebbbb19880b29a10c9829",
              "include": null,
              "has_details": false,
              "type": "int8_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": false,
              "is_private": true,
              "name": "_dataPin",
              "brief": "reference to the data pin",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a648545c61fd53e5073b4b480ad60edbc",
              "include": null,
              "has_details": true,
              "type": "int16_t",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": false,
              "is_private": false,
              "name": "TIMEOUT",
              "brief": "The value to return if a parse or read times out with no return from the sensor.",
              "description": "<p>The timeout return for an Arduino stream object when no character is available in the Rx buffer is &quot;0.&quot; For enviromental sensors (the typical SDI-12 users) 0 is a common result value. To better distinguish between a timeout because of no sensor response and a true zero return, the timeout should be set to some value that is NOT a possible return from that sensor. If the timeout is not set, -9999 is used.</p>",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "var",
            {
              "base_url": "class_s_d_i12.html",
              "id": "aa402d55fb98b82106fb555c45bd18e6a",
              "include": null,
              "has_details": false,
              "type": "bool",
              "is_constexpr": false,
              "is_static": false,
              "is_protected": false,
              "is_private": false,
              "name": "_parityFailure",
              "brief": "reference to the data pin",
              "description": "",
              "deprecated": null,
              "since": null,
              "has_template_details": false,
              "templates": null
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a2d59995d9505ad65284bda64f417bc1a",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "SDI12",
              "brief": "Construct a new <a href=\"class_s_d_i12.html\" class=\"m-doc\">SDI12</a> instance with no data pin set.",
              "description": "<p>Before using the SDI-12 instance, the data pin must be set with SDI12::setDataPin(dataPin) or SDI12::begin(dataPin). This empty constructor is provided for easier integration with other Arduino libraries.</p><p>When the constructor is called it resets the buffer overflow status to FALSE.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a974c74312129c6bb174eca13ee86f1e7",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "SDI12",
              "brief": "Construct a new <a href=\"class_s_d_i12.html\" class=\"m-doc\">SDI12</a> with the data pin set.",
              "description": "<p>When the constructor is called it resets the buffer overflow status to FALSE and assigns the pin number &quot;dataPin&quot; to the private variable &quot;_dataPin&quot;.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": true,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "dataPin",
                  "type": "int8_t",
                  "type_name": "int8_t dataPin",
                  "default": null,
                  "description": "The data pin&#x27;s digital pin number",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a22af9fc4aead35df0af16127673a93cd",
              "include": null,
              "has_details": true,
              "type": "",
              "name": "~SDI12",
              "brief": "Destroy the <a href=\"class_s_d_i12.html\" class=\"m-doc\">SDI12</a> object.",
              "description": "<p>When the destructor is called, it&#x27;s main task is to disable any interrupts that had been previously assigned to the pin, so that the pin will behave as expected when used for other purposes. This is achieved by putting the SDI-12 object in the SDI12_DISABLED state. After disabling interrupts, the pointer to the current active SDI-12 instance is set to null if it had pointed to the destroyed object. Finally, for AVR board, the timer prescaler is set back to whatever it had been prior to creating the SDI-12 object.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "ab74c6f9f881f8ee79a933708e5c1db4f",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "begin",
              "brief": "Begin the SDI-12 object.",
              "description": "<p>This is called to begin the functionality of the SDI-12 object. It sets the object as the active object, sets the stream timeout to 150ms to match SDI-12 specs, sets the timeout return value to <a href=\"class_s_d_i12.html#a648545c61fd53e5073b4b480ad60edbc\" class=\"m-doc\">SDI12::<wbr />TIMEOUT</a>, and configures the timer prescaler.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a83dd7f574a45a1051c57903e13a40c50",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "begin",
              "brief": "Set the SDI12::_datapin and begin the SDI-12 object.",
              "description": "<p>This is called to begin the functionality of the SDI-12 object. It sets the object as the active object, sets the stream timeout to 150ms to match SDI-12 specs, sets the timeout return value to <a href=\"class_s_d_i12.html#a648545c61fd53e5073b4b480ad60edbc\" class=\"m-doc\">SDI12::<wbr />TIMEOUT</a>, and configures the timer prescaler.    If the SDI-12 instance is created using the empty constuctor, this must be used to set the data pin.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "dataPin",
                  "type": "int8_t",
                  "type_name": "int8_t dataPin",
                  "default": null,
                  "description": "The data pin&#x27;s digital pin number",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a53e48ceffa1ecbcf9f3d62e4546f520e",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "end",
              "brief": "Disable the SDI-12 object (but do not destroy it).",
              "description": "<p>Set the SDI-12 state to disabled, set the pointer to the current active instance to null, and then, for AVR boards, unset the timer prescaler.</p><p>This can be called to temporarily cease all functionality of the SDI-12 object. It is not as harsh as destroying the object with the destructor, as it will maintain the memory buffer.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "ae042fba505d7c36e31020648e6c532dc",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setTimeoutValue",
              "brief": "Set the value to return if a parse int or parse float times out with no return from the sensor.",
              "description": "<p>The &quot;standard&quot; timeout return for an Arduino stream object when no character is available in the Rx buffer is &quot;0.&quot; For enviromental sensors (the typical SDI-12 users) 0 is a common result value. To better distinguish between a timeout because of no sensor response and a true zero return, the timeout should be set to some value that is NOT a possible return from that sensor. If the timeout is not set, -9999 is used.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "value",
                  "type": "int16_t",
                  "type_name": "int16_t value",
                  "default": null,
                  "description": "the value to return on timeout",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a19490dc8f7222741133420049ac852b2",
              "include": null,
              "has_details": true,
              "type": "int8_t",
              "name": "getDataPin",
              "brief": "Get the data pin for the current SDI-12 instance.",
              "description": "",
              "return_value": "The data pin number",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a0faebdc7b8776d5ce3f25dbdad790fae",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "setDataPin",
              "brief": "Set the data pin for the current SDI-12 instance.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "dataPin",
                  "type": "int8_t",
                  "type_name": "int8_t dataPin",
                  "default": null,
                  "description": "The data pin&#x27;s digital pin number",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Reading from the SDI-12 Buffer",
        "id": "reading-from-the-sdi-12-buffer",
        "description": "<p>These functions are for reading incoming data stored in the SDI-12 buffer.</p><p><a name=\"reading_buffer\"></a></p><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"class_s_d_i12.html#buffer-setup\">Buffer Setup</a></p></aside><aside class=\"m-note m-info\"><h4>Note</h4><p>peakNextDigit(), <a href=\"class_s_d_i12.html#a7a225c6677fc45173f689eb51aaf41f4\" class=\"m-doc\">parseInt()</a> and <a href=\"class_s_d_i12.html#a313084baca70512debe3c52f0f5f239e\" class=\"m-doc\">parseFloat()</a> are fully implemented in the parent <a href=\"class_stream.html\" class=\"m-doc\">Stream</a> class but we don&#x27;t want to them use as they are inherited. Although they are not virtual and cannot be overridden, recreating them here hides the stream default versions to allow for a custom timeout return value. The default value for the <a href=\"class_stream.html\" class=\"m-doc\">Stream</a> class is to return 0. This makes distinguishing timeouts from true zero readings impossible. Therefore the default value has been set to -9999 in the being function. The value returned by a timeout (<a href=\"class_s_d_i12.html#a648545c61fd53e5073b4b480ad60edbc\" class=\"m-doc\">SDI12::<wbr />TIMEOUT</a>) is a public variable and can be changed dynamically within a program by calling <code>mySDI12.TIMEOUT = (int) newValue</code> or using <a href=\"class_s_d_i12.html#ae042fba505d7c36e31020648e6c532dc\" class=\"m-doc\">SDI12::<wbr />setTimeoutValue(int16_t value)</a>.</p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a1b35cfdeb2358dfeac079cfa52839b2d",
              "include": null,
              "has_details": true,
              "type": "int",
              "name": "available",
              "brief": "Return the number of bytes available in the Rx buffer.",
              "description": "<p><a href=\"class_s_d_i12.html#a1b35cfdeb2358dfeac079cfa52839b2d\" class=\"m-doc\">available()</a> is a public function that returns the number of characters available in the Rx buffer.</p><p>To understand how: <code>_rxBufferTail + SDI12_BUFFER_SIZE - _rxBufferHead) % SDI12_BUFFER_SIZE;</code> accomplishes this task, we will use a few examples.</p><p>To start take the buffer below that has <code>SDI12_BUFFER_SIZE = 10</code>. The message &quot;abc&quot; has been wrapped around (circular buffer).</p><div class=\"m-code-arduino\"><div class=\"highlight\"><div class=\"line\"><a id=\"l-1\" name=\"l-1\"></a><span class=\"linenos\">1</span><span class=\"n\">_rxBufferTail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"c1\">// points to the &#39;-&#39; after c</span>\n</div><div class=\"line\"><a id=\"l-2\" name=\"l-2\"></a><span class=\"linenos\">2</span><span class=\"n\">_rxBufferHead</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"c1\">// points to &#39;a&#39;</span>\n</div></div></div><p>[ c ] [ - ] [ - ] [ - ] [ - ] [ - ] [ - ] [ - ] [ a ] [ b ]</p><p>The number of available characters is (1 + 10 - 8) % 10 = 3</p><p>The &#x27;&#x27; or modulo operator finds the remainder of division of one number by another. In integer arithmetic 3 / 10 = 0, but has a remainder of 3. We can only get the remainder by using the the modulo &#x27;&#x27;. 3 % 10 = 3. This next case demonstrates more clearly why the modulo is used.</p><div class=\"m-code-arduino\"><div class=\"highlight\"><div class=\"line\"><a id=\"l-1\" name=\"l-1\"></a><span class=\"linenos\">1</span><span class=\"n\">_rxBufferTail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"c1\">// points to the &#39;-&#39; after c</span>\n</div><div class=\"line\"><a id=\"l-2\" name=\"l-2\"></a><span class=\"linenos\">2</span><span class=\"n\">_rxBufferHead</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"c1\">// points to &#39;a&#39;</span>\n</div></div></div><p>[ a ] [ b ] [ c ] [ - ] [ - ] [ - ] [ - ] [ - ] [ - ] [ - ]</p><p>The number of available characters is (4 + 10 - 1) % 10 = 3</p><p>If we did not use the modulo we would get either ( 4 + 10 - 1 ) = 13 characters or ( 4 + 10 - 1 ) / 10 = 1 character. Obviously neither is correct.</p><p>If there has been a buffer overflow, <a href=\"class_s_d_i12.html#a1b35cfdeb2358dfeac079cfa52839b2d\" class=\"m-doc\">available()</a> will return -1.</p>",
              "return_value": "The number of characters in the buffer",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": true,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a882820fe039a037eb0a30a8202c29ce1",
              "include": null,
              "has_details": true,
              "type": "int",
              "name": "peek",
              "brief": "Reveal next byte in the Rx buffer without consuming it.",
              "description": "<p><a href=\"class_s_d_i12.html#a882820fe039a037eb0a30a8202c29ce1\" class=\"m-doc\">peek()</a> is a public function that allows the user to look at the character that is at the head of the buffer. Unlike <a href=\"class_s_d_i12.html#add1c9fb00af32e07a161511f39ba069c\" class=\"m-doc\">read()</a> it does not consume the character (i.e. the index addressed by _rxBufferHead is not changed). <a href=\"class_s_d_i12.html#a882820fe039a037eb0a30a8202c29ce1\" class=\"m-doc\">peek()</a> returns -1 if there are no characters to show.</p>",
              "return_value": "The next byte in the character buffer.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": true,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "aad923901cae3a2c89a18644b7d2c8ba3",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "clearBuffer",
              "brief": "Clear the Rx buffer by setting the head and tail pointers to the same value.",
              "description": "<p><a href=\"class_s_d_i12.html#aad923901cae3a2c89a18644b7d2c8ba3\" class=\"m-doc\">clearBuffer()</a> is a public function that clears the buffers contents by setting the index for both head and tail back to zero.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "add1c9fb00af32e07a161511f39ba069c",
              "include": null,
              "has_details": true,
              "type": "int",
              "name": "read",
              "brief": "Return next byte in the Rx buffer, consuming it.",
              "description": "<p><a href=\"class_s_d_i12.html#add1c9fb00af32e07a161511f39ba069c\" class=\"m-doc\">read()</a> returns the character at the current head in the buffer after incrementing the index of the buffer head. This action &#x27;consumes&#x27; the character, meaning it can not be read from the buffer again. If you would rather see the character, but leave the index to head intact, you should use <a href=\"class_s_d_i12.html#a882820fe039a037eb0a30a8202c29ce1\" class=\"m-doc\">peek()</a>;</p>",
              "return_value": "The next byte in the character buffer.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": true,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a199808fca63316f34d97a81b33c35e63",
              "include": null,
              "has_details": false,
              "type": "void",
              "name": "flush",
              "brief": "Wait for sending to finish - because no TX buffering, does nothing.",
              "description": "",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": true,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a7a225c6677fc45173f689eb51aaf41f4",
              "include": null,
              "has_details": true,
              "type": "long",
              "name": "parseInt",
              "brief": "Return the first valid (long) integer value from the current position.",
              "description": "<p>The value of lookahead determines how parseInt looks ahead in the stream. See LookaheadMode enumeration at the top of the file. Lookahead is terminated by the first character that is not a valid part of an integer. Once parsing commences, &#x27;ignore&#x27; will be skipped in the stream.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function <em>hides</em> the <a href=\"class_stream.html\" class=\"m-doc\">Stream</a> class function to allow a custom value to be returned on timeout. It cannot overwrite the <a href=\"class_stream.html\" class=\"m-doc\">Stream</a> function because it is not virtual.</p></aside><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"_s_d_i12_8h.html#ab2c5d00ddee50ff8d5d68cd2d7a7fa49\" class=\"m-doc\">SDI12::<wbr />LookaheadMode</a></p></aside>",
              "return_value": "The first valid integer in the stream",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "lookahead",
                  "type": "<a href=\"_s_d_i12_8h.html#ab2c5d00ddee50ff8d5d68cd2d7a7fa49\" class=\"m-doc\">LookaheadMode</a>",
                  "type_name": "<a href=\"_s_d_i12_8h.html#ab2c5d00ddee50ff8d5d68cd2d7a7fa49\" class=\"m-doc\">LookaheadMode</a> lookahead",
                  "default": "<a href=\"_s_d_i12_8h.html#ab2c5d00ddee50ff8d5d68cd2d7a7fa49a823ae842da6939bbada21ab3b5c4f2eb\" class=\"m-doc\">SKIP_<wbr />ALL</a>",
                  "description": "the mode to use to look ahead in the stream, default is LookaheadMode::SKIP_ALL",
                  "direction": ""
                },
                {
                  "name": "ignore",
                  "type": "char",
                  "type_name": "char ignore",
                  "default": "&#x27;\\x01&#x27;",
                  "description": "a character to ignore in the stream, default is &#x27;\\x01&#x27;",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a313084baca70512debe3c52f0f5f239e",
              "include": null,
              "has_details": true,
              "type": "float",
              "name": "parseFloat",
              "brief": "Return the first valid float value from the current position.",
              "description": "<p>The value of lookahead determines how parseInt looks ahead in the stream. See LookaheadMode enumeration at the top of the file. Lookahead is terminated by the first character that is not a valid part of an integer. Once parsing commences, &#x27;ignore&#x27; will be skipped in the stream.</p><aside class=\"m-note m-info\"><h4>Note</h4><p>This function <em>hides</em> the <a href=\"class_stream.html\" class=\"m-doc\">Stream</a> class function to allow a custom value to be returned on timeout. It cannot overwrite the <a href=\"class_stream.html\" class=\"m-doc\">Stream</a> function because it is not virtual.</p></aside><aside class=\"m-note m-default\"><h4>See also</h4><p><a href=\"_s_d_i12_8h.html#ab2c5d00ddee50ff8d5d68cd2d7a7fa49\" class=\"m-doc\">SDI12::<wbr />LookaheadMode</a></p></aside>",
              "return_value": "The first valid float in the stream",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "lookahead",
                  "type": "<a href=\"_s_d_i12_8h.html#ab2c5d00ddee50ff8d5d68cd2d7a7fa49\" class=\"m-doc\">LookaheadMode</a>",
                  "type_name": "<a href=\"_s_d_i12_8h.html#ab2c5d00ddee50ff8d5d68cd2d7a7fa49\" class=\"m-doc\">LookaheadMode</a> lookahead",
                  "default": "<a href=\"_s_d_i12_8h.html#ab2c5d00ddee50ff8d5d68cd2d7a7fa49a823ae842da6939bbada21ab3b5c4f2eb\" class=\"m-doc\">SKIP_<wbr />ALL</a>",
                  "description": "the mode to use to look ahead in the stream, default is LookaheadMode::SKIP_ALL",
                  "direction": ""
                },
                {
                  "name": "ignore",
                  "type": "char",
                  "type_name": "char ignore",
                  "default": "&#x27;\\x01&#x27;",
                  "description": "a character to ignore in the stream, default is &#x27;\\x01&#x27;",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "acb8f6c730ec467da1ab7d88742d47f2d",
              "include": null,
              "has_details": true,
              "type": "int",
              "name": "peekNextDigit",
              "brief": "Return the next numeric digit in the stream or -1 if timeout.",
              "description": "",
              "return_value": "The next numeric digit in the stream",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": true,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "lookahead",
                  "type": "<a href=\"_s_d_i12_8h.html#ab2c5d00ddee50ff8d5d68cd2d7a7fa49\" class=\"m-doc\">LookaheadMode</a>",
                  "type_name": "<a href=\"_s_d_i12_8h.html#ab2c5d00ddee50ff8d5d68cd2d7a7fa49\" class=\"m-doc\">LookaheadMode</a> lookahead",
                  "default": null,
                  "description": "the mode to use to look ahead in the stream",
                  "direction": ""
                },
                {
                  "name": "detectDecimal",
                  "type": "bool",
                  "type_name": "bool detectDecimal",
                  "default": null,
                  "description": "True to accept a decimal point (&#x27;.&#x27;) as part of a number",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Using more than one SDI-12 Object",
        "id": "using-more-than-one-sdi-12-object",
        "description": "<p>Functions needed for multiple instances of the <a href=\"class_s_d_i12.html\" class=\"m-doc\">SDI12</a> class.</p><p><a name=\"multiple_objects\"></a></p><p>This library is allows for multiple instances of itself running on the same or different pins. SDI-12 can support up to 62 sensors on a single pin/bus, so it is not necessary to use an instance for each sensor.</p><p>Because we are using pin change interrupts there can only be one active object at a time (since this is the only reliable way to determine which pin the interrupt occurred on). The active object is the only object that will respond properly to interrupts. However promoting another instance to Active status does not automatically remove the interrupts on the other pin. For proper behavior it is recommended to use this pattern:</p><div class=\"m-code-arduino\"><div class=\"highlight\"><div class=\"line\"><a id=\"l-1\" name=\"l-1\"></a><span class=\"linenos\">1</span><span class=\"n\">mySDI12</span><span class=\"p\">.</span><span class=\"n\">forceHold</span><span class=\"p\">();</span>\n</div><div class=\"line\"><a id=\"l-2\" name=\"l-2\"></a><span class=\"linenos\">2</span><span class=\"n\">myOtherSDI12</span><span class=\"p\">.</span><span class=\"n\">setActive</span><span class=\"p\">();</span>\n</div></div></div><aside class=\"m-note m-info\"><h4>Note</h4><ul><li>Promoting an object into the Active state will set it as <code>SDI12_HOLDING</code>.</li><li>Calling mySDI12.begin() will assert mySDI12 as the new active object, until another instance calls myOtherSDI12.begin() or myOtherSDI12.setActive().</li><li>Calling mySDI12.end() does NOT hand-off active status to another SDI-12 instance.</li><li>You can check on the active object by calling mySDI12.isActive(), which will return a boolean value TRUE if active or FALSE if inactive.</li></ul></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "ac8aadcfe54c0ddd3cc4dfb13549a8cc0",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "setActive",
              "brief": "Set this instance as the active SDI-12 instance.",
              "description": "<p>A method for setting the current object as the active object; returns TRUE if the object was not formerly the active object and now is.</p><ul><li>Promoting an inactive to the active instance will start it in the SDI12_HOLDING state and return TRUE.</li><li>Otherwise, if the object is currently the active instance, it will remain unchanged and return FALSE.</li></ul>",
              "return_value": "True indicates that the current SDI-12 instance was not formerly the active one and now is. False indicates that the current SDI-12 instance <em>is already the active one</em> and the state was not changed.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a771650620377ebbf31fc27a9dd803f71",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "isActive",
              "brief": "Check if this instance is active.",
              "description": "<p><a href=\"class_s_d_i12.html#a771650620377ebbf31fc27a9dd803f71\" class=\"m-doc\">isActive()</a> is a method for checking if the object is the active object. Returns true if the object is currently the active object, false otherwise.</p>",
              "return_value": "True indicates that the curren SDI-12 instace is the active one.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ]
        ]
      },
      {
        "name": "Waking Up and Talking To Sensors",
        "id": "waking-up-and-talking-to-sensors",
        "description": "<p>These functions are needed to communicate with SDI-12 sensors (slaves) or an SDI-12 datalogger (master).</p><p><a name=\"communication\"></a></p>",
        "members": [
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a507d87250b26bedc6ed99cfa4eb95e46",
              "include": null,
              "has_details": true,
              "type": "size_t",
              "name": "write",
              "brief": "Write out a byte on the SDI-12 line.",
              "description": "<p>Sets the state to transmitting, writes a character, and then sets the state back to listening. This function must be implemented as part of the Arduino <a href=\"class_stream.html\" class=\"m-doc\">Stream</a> instance, but is <em>NOT</em> intenteded to be used for SDI-12 objects. Instead, use the <a href=\"class_s_d_i12.html#a22dc3cfa696028e766909406e82c37cf\" class=\"m-doc\">SDI12::<wbr />sendCommand()</a> or <a href=\"class_s_d_i12.html#a63690622e1ee57d78bd6ea5ef20960c0\" class=\"m-doc\">SDI12::<wbr />sendResponse()</a> functions.</p>",
              "return_value": "The number of characters written",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": true,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "byte",
                  "type": "uint8_t",
                  "type_name": "uint8_t byte",
                  "default": null,
                  "description": "The character to write",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a22dc3cfa696028e766909406e82c37cf",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "sendCommand",
              "brief": "Send a command out on the data line, acting as a datalogger (master)",
              "description": "<p>A publicly accessible function that sends a break to wake sensors and sends out a command byte by byte on the data line.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "cmd",
                  "type": "String&amp;",
                  "type_name": "String&amp; cmd",
                  "default": null,
                  "description": "the command to send",
                  "direction": ""
                },
                {
                  "name": "extraWakeTime",
                  "type": "int8_t",
                  "type_name": "int8_t extraWakeTime",
                  "default": "0",
                  "description": "The amount of additional time in milliseconds that the sensor takes to wake before being ready to receive a command. Default is 0ms - meaning the sensor is ready for a command by the end of the 12ms break. Per protocol, the wake time must be less than 100 ms.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "aa2bb79df6de815c697c09960096fdd4d",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "sendCommand",
              "brief": "Send a command out on the data line, acting as a datalogger (master)",
              "description": "<p>A publicly accessible function that sends a break to wake sensors and sends out a command byte by byte on the data line.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "cmd",
                  "type": "const char*",
                  "type_name": "const char* cmd",
                  "default": null,
                  "description": "the command to send",
                  "direction": ""
                },
                {
                  "name": "extraWakeTime",
                  "type": "int8_t",
                  "type_name": "int8_t extraWakeTime",
                  "default": "0",
                  "description": "The amount of additional time in milliseconds that the sensor takes to wake before being ready to receive a command. Default is 0ms - meaning the sensor is ready for a command by the end of the 12ms break. Per protocol, the wake time must be less than 100 ms.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "aa77162643acf6e4d966c4304b9136307",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "sendCommand",
              "brief": "Send a command out on the data line, acting as a datalogger (master)",
              "description": "<p>A publicly accessible function that sends a break to wake sensors and sends out a command byte by byte on the data line.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "cmd",
                  "type": "<a href=\"_s_d_i12_8h.html#a11206b202ad711bc9713f324ae619bcf\" class=\"m-doc\">FlashString</a>",
                  "type_name": "<a href=\"_s_d_i12_8h.html#a11206b202ad711bc9713f324ae619bcf\" class=\"m-doc\">FlashString</a> cmd",
                  "default": null,
                  "description": "the command to send",
                  "direction": ""
                },
                {
                  "name": "extraWakeTime",
                  "type": "int8_t",
                  "type_name": "int8_t extraWakeTime",
                  "default": "0",
                  "description": "The amount of additional time in milliseconds that the sensor takes to wake before being ready to receive a command. Default is 0ms - meaning the sensor is ready for a command by the end of the 12ms break. Per protocol, the wake time must be less than 100 ms.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "ae1d4db968a3f0c35012476a1b2ea534b",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "calculateCRC",
              "brief": "Calculates the 16-bit Cyclic Redundancy Check (CRC) for an SDI-12 message.",
              "description": "",
              "return_value": "The calculated CRC",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "resp",
                  "type": "String&amp;",
                  "type_name": "String&amp; resp",
                  "default": null,
                  "description": "The message to calculate the CRC for.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a4867482c7088d4d87692f8d816f6f26a",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "calculateCRC",
              "brief": "Calculates the 16-bit Cyclic Redundancy Check (CRC) for an SDI-12 message.",
              "description": "",
              "return_value": "The calculated CRC",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "resp",
                  "type": "const char*",
                  "type_name": "const char* resp",
                  "default": null,
                  "description": "The message to calculate the CRC for.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a2fd85d726c24a24141fd28da1ce400de",
              "include": null,
              "has_details": true,
              "type": "uint16_t",
              "name": "calculateCRC",
              "brief": "Calculates the 16-bit Cyclic Redundancy Check (CRC) for an SDI-12 message.",
              "description": "",
              "return_value": "The calculated CRC",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "resp",
                  "type": "<a href=\"_s_d_i12_8h.html#a11206b202ad711bc9713f324ae619bcf\" class=\"m-doc\">FlashString</a>",
                  "type_name": "<a href=\"_s_d_i12_8h.html#a11206b202ad711bc9713f324ae619bcf\" class=\"m-doc\">FlashString</a> resp",
                  "default": null,
                  "description": "The message to calculate the CRC for.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a8ef99372bb3e1281fba0c84e4b26c555",
              "include": null,
              "has_details": true,
              "type": "String",
              "name": "crcToString",
              "brief": "Converts a numeric 16-bit CRC to an ASCII String.",
              "description": "<p>From the SDI-12 Specifications:</p><pre>The 16 bit CRC is encoded as three ASCII characters\nusing the following algorithm:\n    1st character = 0x40 OR (CRC shifted right 12 bits)\n    2nd character = 0x40 OR ((CRC shifted right 6 bits) AND 0x3F)\n    3rd character = 0x40 OR (CRC AND 0x3F)\n</pre>",
              "return_value": "An ASCII string for the CRC",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "crc",
                  "type": "uint16_t",
                  "type_name": "uint16_t crc",
                  "default": null,
                  "description": "The 16-bit CRC",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a8450afe2c752d832936b6ecfdb1c6b7a",
              "include": null,
              "has_details": true,
              "type": "bool",
              "name": "verifyCRC",
              "brief": "Verifies that the CRC returned at the end of an SDI-12 message matches that of the content of the message.",
              "description": "",
              "return_value": "True if the CRC matches and the message is valid, false if the CRC doesn&#x27;t match and the message could be retried.",
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "respWithCRC",
                  "type": "String&amp;",
                  "type_name": "String&amp; respWithCRC",
                  "default": null,
                  "description": "The full SDI-12 message, including the CRC at the end.",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a63690622e1ee57d78bd6ea5ef20960c0",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "sendResponse",
              "brief": "Send a response out on the data line (for slave use)",
              "description": "<p>A publicly accessible function that sends out an 8.33 ms marking and a response byte by byte on the data line. This is needed if the Arduino is acting as an SDI-12 device itself, not as a recorder for another SDI-12 device.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "resp",
                  "type": "String&amp;",
                  "type_name": "String&amp; resp",
                  "default": null,
                  "description": "the response to send",
                  "direction": ""
                },
                {
                  "name": "addCRC",
                  "type": "bool",
                  "type_name": "bool addCRC",
                  "default": "false",
                  "description": "True to append a CRC to the outgoing response",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a4ef73880b0d41bf5cb5009f674dc3d69",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "sendResponse",
              "brief": "Send a response out on the data line (for slave use)",
              "description": "<p>A publicly accessible function that sends out an 8.33 ms marking and a response byte by byte on the data line. This is needed if the Arduino is acting as an SDI-12 device itself, not as a recorder for another SDI-12 device.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "resp",
                  "type": "const char*",
                  "type_name": "const char* resp",
                  "default": null,
                  "description": "the response to send",
                  "direction": ""
                },
                {
                  "name": "addCRC",
                  "type": "bool",
                  "type_name": "bool addCRC",
                  "default": "false",
                  "description": "True to append a CRC to the outgoing response",
                  "direction": ""
                }
              ]
            }
          ],
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a16c75cebfe59a953f74edc27d59ba82a",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "sendResponse",
              "brief": "Send a response out on the data line (for slave use)",
              "description": "<p>A publicly accessible function that sends out an 8.33 ms marking and a response byte by byte on the data line. This is needed if the Arduino is acting as an SDI-12 device itself, not as a recorder for another SDI-12 device.</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": true,
              "params": [
                {
                  "name": "resp",
                  "type": "<a href=\"_s_d_i12_8h.html#a11206b202ad711bc9713f324ae619bcf\" class=\"m-doc\">FlashString</a>",
                  "type_name": "<a href=\"_s_d_i12_8h.html#a11206b202ad711bc9713f324ae619bcf\" class=\"m-doc\">FlashString</a> resp",
                  "default": null,
                  "description": "the response to send",
                  "direction": ""
                },
                {
                  "name": "addCRC",
                  "type": "bool",
                  "type_name": "bool addCRC",
                  "default": "false",
                  "description": "True to append a CRC to the outgoing response",
                  "direction": ""
                }
              ]
            }
          ]
        ]
      },
      {
        "name": "Interrupt Service Routine",
        "id": "interrupt-service-routine",
        "description": "<p>Functions for handling interrupts - responding to changes on the data line and converting them to characters in the Rx buffer.</p><p><a name=\"interrupt_fxns\"></a></p><aside class=\"m-note m-default\"><h4>See also</h4><p>For a detailed explanation of interrupts see <a href=\"interrupts_page.html\" class=\"m-doc\">Overview of Interrupts</a></p></aside>",
        "members": [
          [
            "func",
            {
              "base_url": "class_s_d_i12.html",
              "id": "a70ec41e8674e0335b549c4d8ab8cbca1",
              "include": null,
              "has_details": true,
              "type": "void",
              "name": "handleInterrupt",
              "brief": "Intermediary used by the ISR - passes off responsibility for the interrupt to the active object.",
              "description": "<p>On espressif boards (ESP8266 and ESP32), the ISR must be stored in IRAM</p>",
              "return_value": null,
              "return_values": [],
              "exceptions": [],
              "deprecated": null,
              "since": null,
              "is_constexpr": false,
              "is_consteval": false,
              "is_explicit": false,
              "is_virtual": false,
              "prefix": "static ",
              "is_defaulted": false,
              "is_deleted": false,
              "is_pure_virtual": false,
              "is_final": false,
              "is_override": false,
              "is_noexcept": false,
              "is_conditional_noexcept": false,
              "suffix": "",
              "is_protected": false,
              "is_private": false,
              "is_signal": false,
              "is_slot": false,
              "has_template_details": false,
              "templates": null,
              "has_param_details": false,
              "params": []
            }
          ]
        ]
      }
    ],
    "has_enum_details": true,
    "has_typedef_details": false,
    "has_func_details": true,
    "has_var_details": true,
    "has_define_details": false,
    "breadcrumb": [
      [
        "Stream",
        "class_stream.html"
      ],
      [
        "SDI12",
        "class_s_d_i12.html"
      ]
    ],
    "breadcrumbGroup": [
      [
        "SDI12",
        "class_s_d_i12.html"
      ]
    ],
    "is_final": false,
    "prefix_wbr": "SDI12::<wbr />"
  }
}